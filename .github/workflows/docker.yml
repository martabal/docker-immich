name: Docker build

on:
  workflow_dispatch:
    inputs:
      version:
        description: "version"
        required: false
        type: string
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  repository_dispatch:
    types: [trigger_build]
  schedule:
    - cron: "0 12 * * 3"

jobs:
  build_docker:
    name: build docker images
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - image: openvino
            context: build-main
            file: Dockerfile.openvino
            platforms: linux/amd64
            suffix: -openvino

          - image: cuda
            context: build-main
            file: Dockerfile.cuda
            platforms: linux/amd64
            suffix: -cuda

          - image: classic
            context: build-main
            file: Dockerfile
            platforms: linux/amd64,linux/arm64

          - image: noml
            context: build-noml
            file: Dockerfile
            platforms: linux/amd64,linux/arm64
            suffix: -noml

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set tags
        id: tags
        run: |
          echo "Generate tags"
          if [ "${{ inputs.version }}" != '' ]; then
            echo "immich_version=${{ inputs.version }}" >> $GITHUB_OUTPUT
          elif [ -n "${{ github.event.client_payload.message }}" ]; then
            immich_version="${{ github.event.client_payload.message }}"
            echo "immich_version=${immich_version}" >> $GITHUB_OUTPUT
          else
            immich_version=$(curl -sL https://api.github.com/repos/immich-app/immich/releases/latest | jq -r '.tag_name')
            echo "immich_version=${immich_version}" >> $GITHUB_OUTPUT
          fi
          echo "build_date=$(date +'%Y-%m-%dT%H:%M:%S%:z')" >> $GITHUB_OUTPUT
          echo "short_date=$(date '+%Y%m%d')" >> $GITHUB_OUTPUT
          echo "commit=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Create Dockerfile from template
        run: python3 render_templates.py

      - name: Generate docker image tags
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/immich
          tags: |
            type=raw,value=latest,enable=${{ github.event_name != 'pull_request' }},suffix=${{ matrix.suffix }}
            type=ref,event=pr,value=${{ steps.tags.outputs.immich_version }},enable=${{ github.event_name == 'pull_request' }},suffix=${{ matrix.suffix }}-${{ steps.tags.outputs.immich_version }}
            type=ref,event=pr,value=${{ steps.tags.outputs.immich_version }},enable=${{ github.event_name == 'pull_request' }},suffix=${{ matrix.suffix }}
            type=raw,value=${{ matrix.image }},enable=${{ matrix.image != 'classic' && github.event_name != 'pull_request' }}
            type=raw,value=${{ steps.tags.outputs.immich_version }},enable=${{ github.event_name != 'pull_request' }},suffix=${{ matrix.suffix }}
            type=raw,value=${{ steps.tags.outputs.immich_version }},enable=${{ github.event_name != 'pull_request' }},suffix=${{ matrix.suffix }}-${{ steps.tags.outputs.short_date }}-${{ steps.tags.outputs.commit }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Build and push docker images
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          provenance: false # prevent unknown architecture
          file: ${{ matrix.context }}/${{ matrix.file }}
          platforms: ${{ matrix.platforms }}
          push: ${{ github.event_name == 'workflow_dispatch' }}
          labels: ${{ steps.metadata.outputs.labels }}
          tags: ${{ steps.metadata.outputs.tags }}
          build-args: |
            BUILD_VERSION=${{ steps.tags.outputs.build_date }}
            IMMICH_VERSION=${{ steps.tags.outputs.immich_version }}
