name: Check for new version
on:
  schedule:
    - cron: "*/20 * * * *"
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: write

jobs:
  check_new_version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.check_version.outputs.new_version }}
      version: ${{ steps.check_version.outputs.version }}
      current_version: ${{ steps.check_version.outputs.current_version }}
    steps:
      - uses: actions/checkout@v4

      - name: Check if new version is available
        id: check_version
        run: |
          git fetch --tags
          current_version=$(git describe --tags $(git rev-list --tags --max-count=1))
          if upstream_version=$(curl -sL https://api.github.com/repos/immich-app/immich/releases/latest | jq -r '.tag_name'); then
            if [ -n "$upstream_version" ] && [ "$upstream_version" != "null" ]; then
              if [ "$current_version" != "$upstream_version" ]; then
                if git tag | grep -q "^$version$"; then
                  echo "Tag '$version' exists."
                else
                  echo "New immich version ($version) detected."
                  echo "current version: $current_version"
                  echo "upstream version: $upstream_version"
                  echo "current_version=$current_version" >> $GITHUB_OUTPUT
                  echo "version=$upstream_version" >> $GITHUB_OUTPUT
                  echo "new_version=true" >> $GITHUB_OUTPUT
                  exit 0
                fi
              else
                echo "Immich version ($upstream_version) already exists"
              fi
            else
              echo "version is not set: $upstream_version" 
            fi
          else
            echo "curl failed" 
          fi
          echo "new_version=false" >> $GITHUB_OUTPUT

  create_new_version:
    if: ${{ needs.check_new_version.outputs.new_version == 'true' }}
    runs-on: ubuntu-latest
    needs: [check_new_version]
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create tag
        run: |
          git tag "${{ needs.check_new_version.outputs.version }}"
          git push --tags

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ needs.check_new_version.outputs.version }} \
            --generate-notes \
            --notes "Read Immich release notes [here](https://github.com/immich-app/immich/releases/tag/${{ needs.check_new_version.outputs.version }})"

      - name: Get base image tag
        id: tag
        run: |
          mkdir /tmp/immich
          curl -o \
            /tmp/immich.tar.gz -L \
            "https://github.com/immich-app/immich/archive/${{ needs.check_new_version.outputs.version }}.tar.gz" && \
          tar xf \
            /tmp/immich.tar.gz -C \
            /tmp/immich --strip-components=1 && \
          dockerfile_content=$(cat /tmp/immich/server/Dockerfile)
          base_image_tag_in_dockerfile=$(echo "$dockerfile_content" | grep -oP 'base-server-prod:\K[^@]+(?=@)')
          if [ -z "$base_image_tag_in_dockerfile" ]; then
            base_image_tag="latest";
          else
            base_image_tag="$base_image_tag_in_dockerfile";
          fi
          echo "base_image_tag=${base_image_tag}" >> $GITHUB_OUTPUT

      - name: Trigger workflow
        if: github.event_name != 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh workflow run docker.yml -f version=${{ needs.check_new_version.outputs.version }} -f base_image_tag=${{ steps.tag.outputs.base_image_tag }}
