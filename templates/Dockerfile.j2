# syntax=docker/dockerfile:1

ARG BASE_IMAGE_TAG="latest"

FROM ghcr.io/martabal/baseimage-immich:${BASE_IMAGE_TAG}

# set version label
ARG BUILD_DATE
ARG BUILD_ID
ARG BUILD_IMAGE
ARG BUILD_IMAGE_URL
ARG BUILD_REPOSITORY
ARG BUILD_REPOSITORY_URL
ARG BUILD_SOURCE_COMMIT
ARG BUILD_SOURCE_REF
ARG BUILD_SOURCE_URL
ARG BUILD_URL

# set third party label
ARG THIRD_PARTY_BUG_FEATURE_URL
ARG THIRD_PARTY_DOCUMENTATION_URL
ARG THIRD_PARTY_SOURCE_URL
ARG THIRD_PARTY_SUPPORT_URL

ARG IMMICH_VERSION
ARG NODEJS_VERSION

# hadolint ignore=DL3048
LABEL build_version="Build-date:- ${BUILD_DATE}"
LABEL maintainer="martabal"

{% if patches -%}
# patches
COPY patches/ /tmp/patches
{% endif -%}

# environment settings
ENV \
  IMMICH_ENV="production" \
  {% if machine_learning_provider -%}
  DEVICE="{{ machine_learning_provider }}" \
  IMMICH_MACHINE_LEARNING_URL="http://127.0.0.1:3003" \
  MACHINE_LEARNING_CACHE_FOLDER="/config/machine-learning" \
  TRANSFORMERS_CACHE="/config/machine-learning" \
  UV_PYTHON="/usr/bin/python3.11" \
  {% else -%}
  IMMICH_MACHINE_LEARNING_ENABLED="false" \
  {% endif -%}
  IMMICH_BUILD=${BUILD_ID} \
  IMMICH_BUILD_DATA="/app/immich/server" \
  IMMICH_BUILD_IMAGE=${BUILD_IMAGE} \
  IMMICH_BUILD_IMAGE_URL=${BUILD_IMAGE_URL} \
  IMMICH_BUILD_URL=${BUILD_URL} \
  IMMICH_MEDIA_LOCATION="/photos" \
  IMMICH_REPOSITORY=${BUILD_REPOSITORY} \
  IMMICH_REPOSITORY_URL=${BUILD_REPOSITORY_URL} \
  IMMICH_SOURCE_COMMIT=${BUILD_SOURCE_COMMIT} \
  IMMICH_SOURCE_REF=${BUILD_SOURCE_REF} \
  IMMICH_SOURCE_URL=${BUILD_SOURCE_URL} \
  IMMICH_THIRD_PARTY_BUG_FEATURE_URL=${THIRD_PARTY_BUG_FEATURE_URL} \
  IMMICH_THIRD_PARTY_DOCUMENTATION_URL=${THIRD_PARTY_DOCUMENTATION_URL} \
  IMMICH_THIRD_PARTY_SOURCE_URL=${THIRD_PARTY_SOURCE_URL} \
  IMMICH_THIRD_PARTY_SUPPORT_URL=${THIRD_PARTY_SUPPORT_URL} \
  NVIDIA_DRIVER_CAPABILITIES="compute,video,utility"

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# run build
# hadolint ignore=DL3003,DL3008{% if machine_learning_provider -%},DL3013{% endif %},SC2046,SC2086
RUN \
  echo "**** setup folders ****" && \
  mkdir -p \
    {% if machine_learning_provider == "armnn" -%}
    /etc/OpenCL/vendors \
    {% endif -%}
    /app/immich/{cli,{% if machine_learning_provider -%}machine-learning,{% if machine_learning_provider == "armnn"-%}armnn,{% endif -%}{% endif -%}server/www} \
    /tmp/{immich,node_modules{% if machine_learning_provider == "armnn"-%},armnn{% endif -%}} && \
  echo "**** download immich ****" && \
  if [ -z ${IMMICH_VERSION} ]; then \
    IMMICH_VERSION=$(curl -sL https://api.github.com/repos/immich-app/immich/releases/latest | \
      jq -r '.tag_name'); \
  fi && \
  curl -o \
    /tmp/immich.tar.gz -L \
    "https://github.com/immich-app/immich/archive/${IMMICH_VERSION}.tar.gz" && \
  tar xf \
    /tmp/immich.tar.gz -C \
    /tmp/immich --strip-components=1 && \
  if [ -z "${NODEJS_VERSION}" ]; then \
    NODEJS_VERSION="$(cat /tmp/immich/server/.nvmrc)" && \
    echo "**** detected node version ${NODEJS_VERSION} ****"; \
  fi && \
  NODEJS_MAJOR_VERSION=$(echo "$NODEJS_VERSION" | cut -d '.' -f 1) && \
  NODEJS_VERSION="${NODEJS_VERSION}-1nodesource1" && \
  echo "**** setup repos ****" && \
  echo "deb [signed-by=/usr/share/keyrings/nodesource-repo.gpg] https://deb.nodesource.com/node_${NODEJS_MAJOR_VERSION}.x nodistro main" >>/etc/apt/sources.list.d/node.list && \
  curl -s "https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key" | gpg --dearmor | tee /usr/share/keyrings/nodesource-repo.gpg >/dev/null && \
  echo "deb [signed-by=/usr/share/keyrings/postgres.gpg] https://apt.postgresql.org/pub/repos/apt noble-pgdg main" > /etc/apt/sources.list.d/pgdg.list && \
  curl -s "https://www.postgresql.org/media/keys/ACCC4CF8.asc" | gpg --dearmor | tee /usr/share/keyrings/postgres.gpg >/dev/null && \
  echo "deb [signed-by=/usr/share/keyrings/deadsnakes.gpg] https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu noble main" >>/etc/apt/sources.list.d/deadsnakes.list && \
  curl -s "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xF23C5A6CF475977595C89F51BA6932366A755776" | gpg --dearmor | tee /usr/share/keyrings/deadsnakes.gpg >/dev/null && \
  {% if machine_learning_provider == "cuda" -%}
  echo "deb [signed-by=/usr/share/keyrings/cuda-archive-keyring.gpg] https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/ /" >>/etc/apt/sources.list.d/cuda.list && \
  curl -s "https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2404/x86_64/3bf863cc.pub" | gpg --dearmor | tee /usr/share/keyrings/cuda-archive-keyring.gpg >/dev/null && \
  printf "Package: *\nPin: release l=NVIDIA CUDA\nPin-Priority: 600" > /etc/apt/preferences.d/cuda && \
  {% endif -%}
  echo "**** install build packages ****" && \
  apt-get update && \
  apt-get install --no-install-recommends -y \
    {% if patches -%}
    patch \
    {% endif -%}
    {% if machine_learning_provider == "armnn" -%}
    binutils-gold \
    {% endif -%}
    {% if machine_learning_provider == "openvino" -%}
    execstack \
    {% endif -%}
    build-essential && \
  echo "**** install runtime packages ****" && \
  apt-get install --no-install-recommends -y \
    {% if machine_learning_provider == "cuda" -%}
    libcublas12 \
    libcublaslt12 \
    libcudart12 \
    libcudnn9-cuda-12 \
    libcufft11 \
    libcurand10 \
    {% endif -%}
    {% if machine_learning_provider == "armnn" -%}
    mesa-opencl-icd \
    ocl-icd-libopencl1 \
    libgomp1 \
    {% endif -%}
    {% if machine_learning_provider -%}
    python3.11 \
    python3.11-dev \
    {% endif -%}
    nodejs=$NODEJS_VERSION \
    perl \
    postgresql-client-14 \
    postgresql-client-15 \
    postgresql-client-16 \
    postgresql-client-17 && \
  echo "**** copy scripts ****" && \
  cd /tmp/immich/docker && \
  cp -r \
    scripts \
    /app/immich/server && \
  {% if patches -%}
  echo "**** apply patches ****" && \
  cd /tmp/immich && \
  for patch in /tmp/patches/*/*.patch; do \
    patch -p1 < "$patch"; \
  done && \
  {% endif -%}
  echo "**** build server ****" && \
  cd /tmp/immich/server && \
  npm ci --no-fund --no-update-notifier && \
  rm -rf node_modules/@img/sharp-libvips* && \
  rm -rf node_modules/@img/sharp-linuxmusl-x64 && \
  cp -r \
    node_modules/@img \
    node_modules/exiftool-vendored.pl \
    /tmp/node_modules && \
  npm run build && \
  npm prune --omit=dev --omit=optional && \
  cp -r \
    /tmp/node_modules/@img \
    /tmp/node_modules/exiftool-vendored.pl \
    node_modules && \
  npm link && \
  npm cache clean --force && \
  cp -a \
    resources \
    package.json \
    package-lock.json \
    node_modules \
    dist \
    /app/immich/server && \
  echo "**** build open-api ****" && \
  cd /tmp/immich/open-api/typescript-sdk && \
  npm ci --no-fund --no-update-notifier && \
  npm run build && \
  echo "**** build web ****" && \
  cd /tmp/immich/web && \
  npm ci --no-fund --no-update-notifier && \
  npm run build && \
  cp -a \
    build/* \
    static \
    /app/immich/server/www && \
  echo "**** build CLI ****" && \
  cd /tmp/immich/cli && \
  npm ci --no-fund --no-update-notifier && \
  npm run build && \
  npm prune --omit=dev --omit=optional && \
  cp -a \
    package.json \
    package-lock.json \
    node_modules \
    dist \
    /app/immich/cli && \
  {% if machine_learning_provider -%}
  echo "**** build machine-learning ****" && \
  if [ $(arch) = "x86_64" ]; then \
    UV_PLATFORM="uv-x86_64-unknown-linux-gnu"; \
  else \
    UV_PLATFORM="uv-aarch64-unknown-linux-gnu"; \
  fi && \
  if [ -z ${UV_VERSION} ]; then \
    UV_VERSION=$(curl -sL https://api.github.com/repos/astral-sh/uv/releases/latest | \
      jq -r '.tag_name'); \
  fi && \
  curl -o \
    /tmp/uv.tar.gz -L \
    "https://github.com/astral-sh/uv/releases/download/${UV_VERSION}/${UV_PLATFORM}.tar.gz" && \
  tar xf \
    /tmp/uv.tar.gz -C \
    /tmp --strip-components=1 && \
  cd /tmp/immich/machine-learning && \
  cp -a \
    immich_ml \
    pyproject.toml \
    uv.lock \
    /app/immich/machine-learning && \
  {% if machine_learning_provider == "armnn" -%}
  curl -o \
    /tmp/armnn.tar.gz -L \
    "https://github.com/ARM-software/armnn/releases/download/v24.05/ArmNN-linux-aarch64.tar.gz" && \
  tar xf \
    /tmp/armnn.tar.gz -C \
    /tmp/armnn && \
  cd /tmp/immich/machine-learning/ann && \
  ARMNN_PATH=/tmp/armnn sh build.sh && \
  cp \
    /tmp/armnn/{libarmnn.so.??,libarmnnOnnxParser.so.??,libarmnnDeserializer.so.??,libarmnnTfLiteParser.so.??,libprotobuf.so.?.??.?.?} \
    /tmp/immich/machine-learning/ann/libann.so \
    /app/immich/armnn/ && \
  echo "/usr/lib/libmali.so" > /etc/OpenCL/vendors/mali.icd && \
  cd /tmp/immich/machine-learning && \
  {% elif machine_learning_provider == "rknn" -%}
  curl -o \
    /usr/lib/librknnrt.so -L \
    "https://github.com/airockchip/rknn-toolkit2/raw/refs/tags/v2.3.0/rknpu2/runtime/Linux/librknn_api/aarch64/librknnrt.so" && \
  {% endif -%}
  echo "hard core 0" >> /etc/security/limits.conf && \
  echo "fs.suid_dumpable 0" >> /etc/sysctl.conf && \
  echo "ulimit -S -c 0 > /dev/null 2>&1" >> /etc/profile && \
  /tmp/uv sync --active --frozen --extra {{ machine_learning_provider }} --no-dev --no-editable --no-install-project --compile-bytecode --no-progress && \
  {% if machine_learning_provider == "openvino" -%}
  find /lsiopy/lib -name "*linux-gnu.so" -exec execstack -c {} \; && \
  {% endif -%}
  {% endif -%}
  echo "**** cleanup ****" && \
  apt-get remove -y --purge \
    {% if patches -%}
    patch \
    {% endif -%}
    {% if machine_learning_provider == "armnn" -%}
    binutils-gold \
    {% endif -%}
    build-essential \
    {% if machine_learning_provider == "openvino" -%}
    execstack \
    {% endif -%}
    {% if machine_learning_provider -%}
    python3.11-dev \
    {% endif -%}
    unzip && \
  apt-get autoremove -y --purge && \
  apt-get clean && \
  rm -rf \
    /etc/apt/sources.list.d/node.list \
    /etc/apt/sources.list.d/pgdg.list \
    /etc/apt/sources.list.d/deadsnakes.list \
    /usr/share/keyrings/deadsnakes.gpg \
    {% if machine_learning_provider == "cuda" -%}
    /etc/apt/preferences.d/cuda \
    /etc/apt/sources.list.d/cuda.list \
    /usr/share/keyrings/cuda-archive-keyring.gpg \
    {% endif -%}
    /root/.cache \
    {% if machine_learning_provider -%}
    /root/.local \
    {% endif -%}
    /root/.npm \
    /tmp/* \
    /usr/share/keyrings/nodesource-repo.gpg \
    /usr/share/keyrings/postgres.gpg \
    /var/lib/apt/lists/* \
    /var/log/* \
    /var/tmp/*

# copy local files
COPY root/ /

# environment settings
ENV NODE_ENV="production"

# ports and volumes
EXPOSE 8080
VOLUME /config /photos /libraries
