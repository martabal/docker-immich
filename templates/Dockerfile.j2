# syntax=docker/dockerfile:1

FROM ghcr.io/martabal/baseimage-ubuntu:noble

# set version label
ARG BUILD_DATE
ARG BUILD_ID
ARG BUILD_IMAGE
ARG BUILD_IMAGE_URL
ARG BUILD_REPOSITORY
ARG BUILD_REPOSITORY_URL
ARG BUILD_SOURCE_COMMIT
ARG BUILD_SOURCE_REF
ARG BUILD_SOURCE_URL
ARG BUILD_URL

# set third party label
ARG THIRD_PARTY_BUG_FEATURE_URL
ARG THIRD_PARTY_DOCUMENTATION_URL
ARG THIRD_PARTY_SOURCE_URL
ARG THIRD_PARTY_SUPPORT_URL

ARG IMMICH_VERSION
ARG IMMICH_BASE_IMAGE_TAG

ARG CURRENT_UBUNTU_VERSION="noble"
ARG LATEST_UBUNTU_VERSION="oracular"

# hadolint ignore=DL3048
LABEL build_version="Build-date:- ${BUILD_DATE}"
LABEL maintainer="martabal"

# environment settings
ENV \
  IMMICH_ENV="production" \
  {% if machine_learning_provider -%}
  DEVICE="{{ machine_learning_provider }}" \
  IMMICH_MACHINE_LEARNING_URL="http://127.0.0.1:3003" \
  MACHINE_LEARNING_CACHE_FOLDER="/config/machine-learning" \
  TRANSFORMERS_CACHE="/config/machine-learning" \
  {% else -%}
  IMMICH_MACHINE_LEARNING_ENABLED="false" \
  {% endif -%}
  IMMICH_BUILD=${BUILD_ID} \
  IMMICH_BUILD_DATA="/app/immich/server" \
  IMMICH_BUILD_IMAGE=${BUILD_IMAGE} \
  IMMICH_BUILD_IMAGE_URL=${BUILD_IMAGE_URL} \
  IMMICH_BUILD_URL=${BUILD_URL} \
  IMMICH_MEDIA_LOCATION="/photos" \
  IMMICH_PORT="8080" \
  IMMICH_REPOSITORY=${BUILD_REPOSITORY} \
  IMMICH_REPOSITORY_URL=${BUILD_REPOSITORY_URL} \
  IMMICH_SOURCE_COMMIT=${BUILD_SOURCE_COMMIT} \
  IMMICH_SOURCE_REF=${BUILD_SOURCE_REF} \
  IMMICH_SOURCE_URL=${BUILD_SOURCE_URL} \
  IMMICH_THIRD_PARTY_BUG_FEATURE_URL=${THIRD_PARTY_BUG_FEATURE_URL} \
  IMMICH_THIRD_PARTY_DOCUMENTATION_URL=${THIRD_PARTY_DOCUMENTATION_URL} \
  IMMICH_THIRD_PARTY_SOURCE_URL=${THIRD_PARTY_SOURCE_URL} \
  IMMICH_THIRD_PARTY_SUPPORT_URL=${THIRD_PARTY_SUPPORT_URL} \
  NVIDIA_DRIVER_CAPABILITIES="compute,video,utility"

SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# run build
# hadolint ignore=DL3003,DL3008{% if machine_learning_provider -%},DL3013{% endif %},SC2046
RUN \
  echo "**** create folders ****" && \
  mkdir -p \
    {% if machine_learning_provider == "armnn" -%}
    /etc/OpenCL/vendors \
    {% endif -%}
    /app/immich/{cli,{% if machine_learning_provider -%}machine-learning/ann,{% if machine_learning_provider == "armnn"-%}armnn,{% endif -%}{% endif -%}server/geodata,server/www} \
    /tmp/{immich-dependencies,immich,node_modules{% if machine_learning_provider == "armnn"-%},armnn{% endif -%}} && \
  echo "**** install build packages ****" && \
  if [ $(arch) = "x86_64" ]; then \
    {% if machine_learning_provider == "cuda" -%}
    CUDA_UBUNTU_REPO="ubuntu2404" && \
    CUDA_ARCHITECTURE="x86_64" && \
    {% endif -%}
    UBUNTU_REPO="http://archive.ubuntu.com/ubuntu/"; \
  else \
    {% if machine_learning_provider == "cuda" -%}
    CUDA_UBUNTU_REPO="ubuntu2204" && \
    CUDA_ARCHITECTURE="arm64" && \
    {% endif -%}
    UBUNTU_REPO="http://ports.ubuntu.com/ubuntu-ports/"; \
  fi && \
  echo "deb [signed-by=/usr/share/keyrings/nodesource-repo.gpg] https://deb.nodesource.com/node_20.x nodistro main" >>/etc/apt/sources.list.d/node.list && \
  curl -s "https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key" | gpg --dearmor | tee /usr/share/keyrings/nodesource-repo.gpg >/dev/null && \
  {% if machine_learning_provider == "openvino" -%}
  echo "deb [signed-by=/usr/share/keyrings/deadsnakes.gpg] https://ppa.launchpadcontent.net/deadsnakes/ppa/ubuntu ${CURRENT_UBUNTU_VERSION} main" >>/etc/apt/sources.list.d/deadsnakes.list && \
  curl -s "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xF23C5A6CF475977595C89F51BA6932366A755776" | gpg --dearmor | tee /usr/share/keyrings/deadsnakes.gpg >/dev/null && \
  {% elif machine_learning_provider == "cuda" -%}
  echo "deb [signed-by=/usr/share/keyrings/cuda-archive-keyring.gpg] https://developer.download.nvidia.com/compute/cuda/repos/${CUDA_UBUNTU_REPO}/${CUDA_ARCHITECTURE}/ /" >>/etc/apt/sources.list.d/cuda.list && \
  curl -s "https://developer.download.nvidia.com/compute/cuda/repos/${CUDA_UBUNTU_REPO}/${CUDA_ARCHITECTURE}/3bf863cc.pub" | gpg --dearmor | tee /usr/share/keyrings/cuda-archive-keyring.gpg >/dev/null && \
  printf "Package: *\nPin: release l=NVIDIA CUDA\nPin-Priority: 600" > /etc/apt/preferences.d/cuda && \
  {% endif -%}
  printf "deb ${UBUNTU_REPO} ${LATEST_UBUNTU_VERSION} main restricted universe multiverse\ndeb-src ${UBUNTU_REPO} ${LATEST_UBUNTU_VERSION} main restricted universe multiverse" >> /etc/apt/sources.list && \
  printf "Package: *\nPin: release n=${LATEST_UBUNTU_VERSION}\nPin-Priority: 450" > /etc/apt/preferences.d/preferences && \
  apt-get update && \
  apt-get install --no-install-recommends -y \
    autoconf \
    bc \
    build-essential \
    cmake \
    git \
    libdav1d-dev \
    libde265-dev \
    libexif-dev \
    libexpat1-dev \
    libglib2.0-dev \
    libgsf-1-dev \
    libjpeg-dev \
    libltdl-dev \
    liborc-0.4-dev \
    librsvg2-dev \
    libspng-dev \
    libtool \
    libwebp-dev \
    meson \
    pkg-config \
    unzip && \
  apt-get install --no-install-recommends -y -t ${LATEST_UBUNTU_VERSION} \
    libjxl-dev && \
  echo "**** install runtime packages ****" && \
  apt-get install --no-install-recommends -y \
    {% if machine_learning_provider == "cuda" -%}
    libcublas12 \
    libcublaslt12 \
    libcudart12 \
    libcudnn9-cuda-12 \
    libcufft11 \
    libcurand10 \
    {% endif -%}
    libdav1d7 \
    libde265-0 \
    libexif12 \
    libexpat1 \
    libgcc-s1 \
    libglib2.0-0 \
    libgomp1 \
    libgsf-1-114 \
    libio-compress-brotli-perl \
    liblcms2-2 \
    liblqr-1-0 \
    libltdl7 \
    libmimalloc2.0 \
    libopenexr-3-1-30 \
    libopenjp2-7 \
    liborc-0.4-0 \
    libpng16-16 \
    librsvg2-2 \
    libspng0 \
    libwebp7 \
    libwebpdemux2 \
    libwebpmux3 \
    {% if machine_learning_provider == "armnn" -%}
    mesa-opencl-icd \
    ocl-icd-libopencl1 \
    {% endif -%}
    mesa-utils \
    mesa-va-drivers \
    mesa-vulkan-drivers \
    nodejs \
    perl \
    {% if machine_learning_provider -%}
    {% if machine_learning_provider == "openvino" -%}
    python3.10 \
    python3.10-dev \
    python3.10-venv \
    {% else -%}
    python3 \
    python3-dev \
    python3-venv \
    {% endif -%}
    python3-pip \
    {% endif -%}
    zlib1g && \
  apt-get install --no-install-recommends -y -t ${LATEST_UBUNTU_VERSION} \
    libjxl0.10 && \
  if [ $(arch) = "x86_64" ]; then \
    echo "**** install intel dependencies ****" && \
    apt-get install --no-install-recommends -y \
      intel-media-va-driver-non-free \
      ocl-icd-libopencl1 && \
    INTEL_DEPENDENCIES=$(curl -sX GET "https://api.github.com/repos/intel/compute-runtime/releases/latest" | jq -r '.body' | grep wget | grep -v .sum | grep -v .ddeb | sed 's|wget ||g') && \
    mkdir -p /tmp/intel && \
    for i in $INTEL_DEPENDENCIES; do \
      curl -fS --retry 3 --retry-connrefused -o \
        /tmp/intel/$(basename "${i%$'\r'}") -L \
        "${i%$'\r'}"; \
    done && \
    dpkg -i /tmp/intel/*.deb; \
  fi && \
  echo "**** download immich ****" && \
  if [ -z ${IMMICH_VERSION} ]; then \
    IMMICH_VERSION=$(curl -sL https://api.github.com/repos/immich-app/immich/releases/latest | \
      jq -r '.tag_name'); \
  fi && \
  curl -o \
    /tmp/immich.tar.gz -L \
    "https://github.com/immich-app/immich/archive/${IMMICH_VERSION}.tar.gz" && \
  tar xf \
    /tmp/immich.tar.gz -C \
    /tmp/immich --strip-components=1 && \
  if [ -z ${IMMICH_BASE_IMAGE_TAG} ]; then \
    dockerfile_content=$(cat /tmp/immich/server/Dockerfile) && \
    date=$(echo "$dockerfile_content" | grep -oP 'base-server-prod:\K\d{8}') && \
    if [ -z "$date" ]; then \
      IMMICH_BASE_IMAGE_TAG="main"; \
    else \
      IMMICH_BASE_IMAGE_TAG="$date"; \
    fi \
  fi && \
  echo "**** download immich dependencies ${IMMICH_BASE_IMAGE_TAG} ****" && \
  curl -o \
    /tmp/immich-dependencies.tar.gz -L \
    "https://github.com/immich-app/base-images/archive/${IMMICH_BASE_IMAGE_TAG}.tar.gz" && \
  tar xf \
    /tmp/immich-dependencies.tar.gz -C \
    /tmp/immich-dependencies --strip-components=1 && \
  echo "**** build immich dependencies ****" && \
  cd /tmp/immich-dependencies/server/bin && \
  FFMPEG_VERSION=$(jq -cr '.packages[] | select(.name == "ffmpeg").version' /tmp/immich-dependencies/server/bin/build-lock.json) && \
  TARGETARCH=${TARGETARCH:=$(dpkg --print-architecture)} && \
  curl -o \
    /tmp/ffmpeg.deb -L \
    "https://github.com/jellyfin/jellyfin-ffmpeg/releases/download/v${FFMPEG_VERSION}/jellyfin-ffmpeg6_${FFMPEG_VERSION}-${CURRENT_UBUNTU_VERSION}_${TARGETARCH}.deb" && \
  apt-get install --no-install-recommends -y -f \
    /tmp/ffmpeg.deb && \
  ldconfig /usr/lib/jellyfin-ffmpeg/lib && \
  ln -s /usr/lib/jellyfin-ffmpeg/ffmpeg /usr/bin && \
  ln -s /usr/lib/jellyfin-ffmpeg/ffprobe /usr/bin && \
  ./build-libheif.sh && \
  ./build-libraw.sh && \
  ./build-imagemagick.sh && \
  ./build-libvips.sh && \
  mv \
    /tmp/immich-dependencies/server/bin/build-lock.json \
    /app/immich/server && \
  echo "**** download geocoding data ****" && \
  curl -o \
    /tmp/cities500.zip -L \
    "https://download.geonames.org/export/dump/cities500.zip" && \
  curl -o \
    /app/immich/server/geodata/admin1CodesASCII.txt -L \
    "https://download.geonames.org/export/dump/admin1CodesASCII.txt" && \
  curl -o \
    /app/immich/server/geodata/admin2Codes.txt -L \
    "https://download.geonames.org/export/dump/admin2Codes.txt" && \
  curl -o \
    /app/immich/server/geodata/ne_10m_admin_0_countries.geojson -L \
    "https://raw.githubusercontent.com/nvkelso/natural-earth-vector/v5.1.2/geojson/ne_10m_admin_0_countries.geojson" && \
  unzip \
    /tmp/cities500.zip -d \
    /app/immich/server/geodata && \
  date --iso-8601=seconds | tr -d "\n" > /app/immich/server/geodata/geodata-date.txt && \
  echo "**** copy scripts ****" && \
  cd /tmp/immich/docker && \
  cp -r \
    scripts \
    /app/immich/server && \
  echo "**** build server ****" && \
  cd /tmp/immich/server && \
  npm ci --no-fund --no-update-notifier && \
  rm -rf node_modules/@img/sharp-libvips* && \
  rm -rf node_modules/@img/sharp-linuxmusl-x64 && \
  cp -r \
    node_modules/@img \
    node_modules/exiftool-vendored.pl \
    /tmp/node_modules && \
  npm run build && \
  npm prune --omit=dev --omit=optional && \
  cp -r \
    /tmp/node_modules/@img \
    /tmp/node_modules/exiftool-vendored.pl \
    node_modules && \
  npm link && \
  npm cache clean --force && \
  cp -a \
    resources \
    package.json \
    package-lock.json \
    node_modules \
    dist \
    /app/immich/server && \
  echo "**** build open-api ****" && \
  cd /tmp/immich/open-api/typescript-sdk && \
  npm ci --no-fund --no-update-notifier && \
  npm run build && \
  echo "**** build web ****" && \
  cd /tmp/immich/web && \
  npm ci --no-fund --no-update-notifier && \
  npm run build && \
  cp -a \
    build/* \
    static \
    /app/immich/server/www && \
  echo "**** build CLI ****" && \
  cd /tmp/immich/cli && \
  npm ci --no-fund --no-update-notifier && \
  npm run build && \
  npm prune --omit=dev --omit=optional && \
  cp -a \
    package.json \
    package-lock.json \
    node_modules \
    dist \
    /app/immich/cli && \
  {% if machine_learning_provider -%}
  echo "**** build machine-learning ****" && \
  cd /tmp/immich/machine-learning && \
  curl -sSL https://install.python-poetry.org | python3 - && \
  export PATH="/root/.local/bin:$PATH" && \
  {% if machine_learning_provider == "openvino" -%}python3.10 {% else %}python3 {% endif -%} -m venv /lsiopy && \
  poetry config installer.max-workers 10 && \
  poetry config virtualenvs.create false && \
  cp -a \
    pyproject.toml \
    poetry.lock \
    app \
    log_conf.json \
    /app/immich/machine-learning && \
  cp -a \
    ann/ann.py \
    /app/immich/machine-learning/ann && \
  {% if machine_learning_provider == "armnn" -%}
  curl -o \
    /tmp/armnn.tar.gz -L \
    "https://github.com/ARM-software/armnn/releases/download/v23.11/ArmNN-linux-aarch64.tar.gz" && \
  tar xf \
    /tmp/armnn.tar.gz -C \
    /tmp/armnn && \
  cd /tmp/immich/machine-learning/ann && \
  ARMNN_PATH=/tmp/armnn sh build.sh && \
  cp \
    /tmp/armnn/{libarmnn.so.??,libarmnnOnnxParser.so.??,libarmnnDeserializer.so.??,libarmnnTfLiteParser.so.??,libprotobuf.so.?.??.?.?} \
    /tmp/immich/machine-learning/ann/libann.so \
    /app/immich/armnn/ && \
  echo "/usr/lib/libmali.so" > /etc/OpenCL/vendors/mali.icd && \
  cd /tmp/immich/machine-learning && \
  {% endif -%}
  echo "hard core 0" >> /etc/security/limits.conf && \
  echo "fs.suid_dumpable 0" >> /etc/sysctl.conf && \
  echo "ulimit -S -c 0 > /dev/null 2>&1" >> /etc/profile && \
  poetry install --sync --no-interaction --no-ansi --no-root --with {{ machine_learning_provider }} --without dev && \
  {% endif -%}
  echo "**** cleanup ****" && \
  {% if machine_learning_provider -%}
  curl -sSL https://install.python-poetry.org | python3 - --uninstall && \
  {% endif -%}
  apt-get remove -y --purge \
    autoconf \
    bc \
    build-essential \
    cmake \
    git \
    libdav1d-dev \
    libde265-dev \
    libexif-dev \
    libexpat1-dev \
    libglib2.0-dev \
    libgsf-1-dev \
    libheif-dev \
    libjpeg-dev \
    libjxl-dev \
    libltdl-dev \
    liborc-0.4-dev \
    librsvg2-dev \
    libspng-dev \
    libtool \
    libwebp-dev \
    meson \
    pkg-config \
    {% if machine_learning_provider -%}
    {% if machine_learning_provider == "openvino" -%}
    python3.10-dev \
    python3.10-venv \
    {% else -%}
    python3-dev \
    python3-venv \
    {% endif -%}
    python3-pip \
    {% endif -%}
    unzip && \
  apt-get autoremove -y --purge && \
  apt-get clean && \
  rm -rf \
    /etc/apt/sources.list.d/node.list \
    {% if machine_learning_provider == "openvino" -%}
    /etc/apt/sources.list.d/deadsnakes.list \
    /usr/share/keyrings/deadsnakes.gpg \
    {% elif machine_learning_provider == "cuda" -%}
    /etc/apt/sources.list.d/cuda.list \
    /usr/share/keyrings/cuda-archive-keyring.gpg \
    {% endif -%}
    /root/.cache \
    {% if machine_learning_provider -%}
    /root/.local \
    {% endif -%}
    /root/.npm \
    /tmp/* \
    /usr/share/keyrings/nodesource-repo.gpg \
    /var/lib/apt/lists/* \
    /var/log/* \
    /var/tmp/*

# copy local files
COPY root/ /

# environment settings
ENV NODE_ENV="production"

# ports and volumes
EXPOSE 8080
VOLUME /config /photos /libraries
